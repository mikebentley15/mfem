DEV_CC         := g++
GT_CC          := g++
LINK_CC        := icpc

HOSTNAME       := $(shell hostname)

CFLAGS         := -std=c++11
CFLAGS         += -I.
CFLAGS         += -I$(HOME)/git/FLiT/src
CFLAGS         += -I../..
CFLAGS         += -g
CFLAGS         += -Wall
CFLAGS         += -Wextra
CFLAGS         += -Wuninitialized
CFLAGS         += -Wno-shift-count-overflow

GT_OPTL        := -O0
GT_SWITCHES    := -fPIC
GT_CFLAGS      := $(GT_OPTL) $(GT_SWITCHES)
DEV_OPTL       := -O0
DEV_SWITCHES   :=
DEV_CFLAGS     := $(DEV_OPTL) $(DEV_SWITCHES)

LFLAGS         := -lm
LFLAGS         += -lstdc++
LFLAGS         += -L$(HOME)/git/FLiT/lib -lflit
LFLAGS         += -Wl,-rpath=$(HOME)/git/FLiT/lib
LFLAGS         += -lrt
DEV_LFLAGS     := $(LFLAGS)

DEPFLAGS        = -MMD -MF $(patsubst %.o,%.d,$@)

MAKEFILE       := {Makefile}
TARGET         := investigaterun-$(notdir $(MAKEFILE))
TARGET_OUT     := $(TARGET).csv
TARGET_DAT     := $(TARGET_OUT:%=%_Example04_d.dat)
DEV_TARGET     := devtarget
DEV_TARGET_OUT := devrun.csv
DEV_TARGET_DAT := $(DEV_TARGET_OUT:%=%_Example04_d.dat)
DAT_COMPARE    := $(DEV_TARGET_DAT)

DEV_SRC        :=
GT_SRC         :=

{GT_SRC}
{DEV_SRC}

SOURCE         := $(DEV_SRC)
SOURCE         += $(GT_SRC)
VPATH          := $(sort $(dir $(SOURCE)))

OBJ_DIR        := obj
DEV_OBJ        := $(addprefix $(OBJ_DIR)/,$(notdir $(DEV_SRC:%.cpp=%_dev.o)))
GT_OBJ         := $(addprefix $(OBJ_DIR)/,$(notdir $(GT_SRC:%.cpp=%_gt.o)))
OBJ            := $(DEV_OBJ)
OBJ            += $(GT_OBJ)

GT_LIB         := libgt-$(notdir $(MAKEFILE)).so

DEV_TARGET_OBJ := $(addprefix $(OBJ_DIR)/,$(notdir $(SOURCE:%.cpp=%_dev.o)))

DEV_DEP        := $(DEV_OBJ:%.o=%.d)
GT_DEP         := $(GT_OBJ:%.o=%.d)
DEPS           := $(DEV_DEP)
DEPS           += $(GT_DEP)

.PHONY: all run target dev objects
all: diff target dev
target: $(TARGET)
dev: $(DEV_TARGET) $(DEV_TARGET_DAT)
diff: $(TARGET_DAT) $(DAT_COMPARE)
	diff -q $(DAT_COMPARE) $(TARGET_DAT)
objects: $(DEV_OBJ) $(GT_OBJ)

.PHONY: clean cleanobj cleanbin cleandat distclean veryclean
clean: cleanbin cleandat
cleanobj:
	rm -f $(OBJ)
	rm -f $(DEV_TARGET_OBJ)
	rm -rf obj
cleanbin:
	rm -f $(TARGET)
	rm -f $(GT_LIB)
cleandat:
	rm -f $(TARGET_OUT)
	rm -f $(TARGET_DAT)
distclean: veryclean
veryclean: clean cleanobj cleanbin cleandat
	rm -f $(DEV_TARGET)
	rm -f $(DEV_TARGET_OUT)
	rm -f $(DEV_TARGET_DAT)


$(GT_LIB): $(GT_OBJ) $(MAKEFILE)
	rm -f $(GT_LIB)
	$(GT_CC) $(CFLAGS) -shared $(GT_OBJ) $(LFLAGS) -o $(GT_LIB)

$(TARGET): $(DEV_OBJ) $(GT_LIB) $(MAKEFILE)
	$(LINK_CC) $(CFLAGS) $(DEV_OBJ) $(DEV_LFLAGS) -L. -lgt-$(notdir $(MAKEFILE)) -o $(TARGET)

$(TARGET_DAT): $(TARGET)
	LD_LIBRARY_PATH=.:$(LD_LIBRARY_PATH) \
	  ./$(TARGET) --no-timing --output $(TARGET_OUT) 2>&1 >/dev/null

$(DEV_TARGET): $(DEV_TARGET_OBJ)
	$(LINK_CC) $(CFLAGS) $(DEV_TARGET_OBJ) $(DEV_LFLAGS) -o $(DEV_TARGET)

$(DAT_COMPARE): $(DEV_TARGET)
	./$(DEV_TARGET) --timing-repeats 1 --timing-loops 1 --output $(DEV_TARGET_OUT) 2>&1 >/dev/null

$(OBJ_DIR):
	mkdir -p $(OBJ_DIR)

$(OBJ_DIR)/%_dev.o: %.cpp | $(OBJ_DIR)
	@echo "$< -> $@"
	@$(DEV_CC) $(DEV_CFLAGS) $(CFLAGS) $(DEPFLAGS) -c $< -o $@ \
	  -DFLIT_HOST='"$(HOSTNAME)"' \
	  -DFLIT_COMPILER='"$(DEV_CC)"' \
	  -DFLIT_OPTL='"$(DEV_OPTL)"' \
	  -DFLIT_SWITCHES='"$(DEV_SWITCHES)"' \
	  -DFLIT_FILENAME='"$(notdir $(TARGET))"'

$(OBJ_DIR)/%_gt.o: %.cpp | $(OBJ_DIR)
	@echo "$< -> $@"
	@$(GT_CC) $(GT_CFLAGS) $(CFLAGS) $(DEPFLAGS) -c $< -o $@ \
	  -DFLIT_HOST='"$(HOSTNAME)"' \
	  -DFLIT_COMPILER='"$(GT_CC)"' \
	  -DFLIT_OPTL='"$(GT_OPTL)"' \
	  -DFLIT_SWITCHES='"$(GT_SWITCHES)"' \
	  -DFLIT_FILENAME='"$(notdir $(TARGET))"'

.PRECIOUS: %.d
-include $(DEPS)

